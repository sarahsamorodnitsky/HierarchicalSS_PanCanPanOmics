PanCanVarSel::hsaft
load("/Users/sarahsamorodnitsky/Documents/SEIS631/SarahSEIS631Spring2021/Week10/HW10/ames.RData")
View(ames)
table(ames$Neighborhood)
min(1,2,3)
library(tidyverse)
load("/Users/sarahsamorodnitsky/Documents/SEIS631/SarahSEIS631Spring2021/Week11/HW11/ncbirths.rda")
load("/Users/sarahsamorodnitsky/Downloads/fastfood.rda")
View(fastfood)
table(fastfood$restaurant)
arbys <- subset(fastfood, restaurant == "Arbys")
hist(arbys$calories)
ff <- subset(fastfood, restaurant %in% c("Arbys", "Mcdonalds", "Subway"))
boxplot(calories ~ restaurant, data = ff)
hist(subset(ff, restaurant == "Mcdonalds")$calories)
hist(log(subset(ff, restaurant == "Mcdonalds")$calories))
ff <- subset(fastfood, restaurant %in% c("Arbys", "Taco Bell", "Subway"))
boxplot(calories ~ restaurant, data = ff)
ff.aov <- aov(calories~restaurant,data=ff)
summary(ff.aov)
tapply(ff$calories, ff$restaurant, mean)
tapply(ff$calories, ff$restaurant, sd)
?select
?summarise
summarise(ff)
summarise(ff, AvgCalorie = mean(calories))
install.packages("sf")
?group_by
test <- ff %>% group_by(salad)
head(test)
View(test)
test <- fastfood %>% group_by(salad)
fastfood$salad
table(fastfood$salad)
test <- fastfood %>% group_by(restaurant)
?mutate
test <- fastfood %>% select(restaurant, calories)
View(test)
test <- fastfood %>% select(restaurant, calories) %>% filter(calories > 1000)
ff %>% group_by(restaurant) %>% summarise(avg = mean(calories), sd = sd(calories))
ff %>% group_by(restaurant) %>% summarise(avg = mean(calories), sd = sd(calories), size = length(calories))
ff %in% filter(restaurant == "Arbys") %in% select(calories) %in% hist
ff %>% filter(restaurant == "Arbys") %>% select(calories) %>% hist
ff %>% filter(restaurant == "Arbys") %>% select(calories)
hist(ff %>% filter(restaurant == "Arbys") %>% select(calories))
test<-ff %>% filter(restaurant == "Arbys") %>% select(calories)
test
ff %>% filter(restaurant == "Arbys") %>% select(calories) %>% ggplot(aes(x = restaurant, y = calories)) + geom_histogram()
View(ff)
fastfood %>% filter(restaurant == "Arbys") %>% select(calories) %>% ggplot(aes(x = restaurant, y = calories)) + geom_histogram()
fastfood %>% filter(restaurant == "Arbys")
fastfood %>% filter(restaurant == "Arbys") %>% ggplot(aes(x = restaurant, y = calories)) + geom_histogram()
fastfood %>% filter(restaurant == "Arbys") %>% (ggplot(aes(x = restaurant, y = calories)) + geom_histogram())
fastfood %>% filter(restaurant == "Arbys") %>% ggplot(aes(x = restaurant, y = calories))
fig <- fastfood %>% filter(restaurant == "Arbys") %>% ggplot(aes(x = restaurant, y = calories))
fig + geom_histogram()
fig + geom_boxplot()
fig <- fastfood %>% filter(restaurant == "Arbys") %>% ggplot(aes(y = calories))
fig + geom_histogram
fig + geom_histogram()
hist(subset(ff, restaurant=="Arbys")$calories)
hist(subset(ff, restaurant=="Subway")$calories)
hist(subset(ff, restaurant=="Taco Bell")$calories)
summary(aov(calorie ~ restaurant, data = ff))
summary(aov(calories ~ restaurant, data = ff))
pairwise.t.test(ff$calories, ff$restaurant, p.adj = "bonferroni")
test <- aov(calories ~ restaurant, data = ff)
TukeyHSD(test)
pairwise.t.test
test <- aov(calories ~ restaurant, data = ff, pool.sd = FALSE)
test
test <- aov(calories ~ restaurant, data = ff)
pairwise.t.test(ff$restaurant, ff$cal_fat)
pairwise.t.test(ff$calories, ff$restaurant, p.adj = "bonferroni")
res <- pairwise.t.test(ff$calories, ff$restaurant, p.adj = "bonferroni")
summary(res)
res
load("mlbbat10.rda")
load("/Users/sarahsamorodnitsky/Documents/SEIS631/SarahSEIS631Spring2021/Week12/Lecture12/mlbbat10.rda")
View(mlbbat10)
table(mlbbat10)
table(mlbbat10$position)
load("/Users/sarahsamorodnitsky/Documents/SEIS631/SarahSEIS631Spring2021/Week12/Lecture12/mlb_players_18.rda")
load("/Users/sarahsamorodnitsky/Documents/SEIS631/SarahSEIS631Spring2021/Week12/Lecture12/mlb_players_18.rda")
View(mlb_players_18)
table(mlb_players_18$position)
mlb_100 <- subset(mlb_players_18, AB > 100)
nrow(mlb_100)
table(mlb_100$position)
mlb_players_18$position3 <- mlb_players_18$position
mlb_players_18$position3[mlb_players_18$position3 == "C"] <- "C"
mlb_players_18$position3[mlb_players_18$position3 %in% c("CF", "LF", "RF")] <- "OF"
mlb_players_18$position3 <- mlb_players_18$position
mlb_players_18$position3[mlb_players_18$position3 == "C"] <- "C"
mlb_players_18$position3[mlb_players_18$position3 %in% c("CF", "LF", "RF")] <- "OF"
mlb_players_18$position3[mlb_players_18$position3 %in% c("1B", "2B", "3B", "SS")] <- "IF"
mlb_100 <- subset(mlb_players_18, AB > 100)
mlb_groups <- subset(mlb_100, position3 %in% c("C", "IF", "OF"))
nrow(mlb_groups)
mlb_groups$position3
table(mlb_groups$position3)
library(tidyverse)
mlb_groups %in% group_by(position3) %in% summarise(avg_obp = mean(OBP)
sd_obp = sd(OBP))
mlb_groups %>% group_by(position3) %>% summarise(avg_obp = mean(OBP)
sd_obp = sd(OBP))
mlb_groups %>% group_by(position3) %>% summarise(avg_obp = mean(OBP),
sd_obp = sd(OBP))
mlb_aov <- aov(OBP ~ position3, data = mlb_groups)
summary(mlb_aov)
pairwise.t.test(mlb_groups$OBP, mlb_groups$position, p.adj = "bonferroni")
pairwise.t.test(mlb_groups$OBP, mlb_groups$position3, p.adj = "bonferroni")
mlb_OF_IF <- mlb_groups %in% select(position %in% c("OF", "IF"))
mlb_OF_IF <- mlb_groups %in% select(position3 %in% c("OF", "IF"))
mlb_OF_IF <- mlb_groups %>% select(position3 %in% c("OF", "IF"))
mlb_OF_IF <- mlb_groups %>% filter(position3 %in% c("OF", "IF"))
mlb_OF_IF
t.test(mlb_OF_IF$OBP, mlb_OF_IF$position3)
mlb_OF_IF$position3
t.test(mlb_OF_IF$OBP ~ mlb_OF_IF$position3)
pairwise.t.test(mlb_groups$OBP, mlb_groups$position3, p.adj = "bonferroni")
mlb_C_IF <- mlb_groups %>% filter(position3 %in% c("C", "IF"))
t.test(mlb_C_IF$OBP ~ mlb_C_IF$position3)
0.002758*3
mlb_100_3 <- filter(mlb_players_18, AB > 100, games > 5)
mlb_slim <- select(mlb_players_18, team, position, AB)
mutate(mlb_slim, doub_plus_trip = doubles + triples)
mutate(mlb_players_18, doub_plus_trip = doubles + triples)
mlb_players_18 <- mutate(mlb_players_18, doub_plus_trip = doubles + triples)
summarise(mlb_players_18, mean_AB = mean(AB), sd_AB = sd(AB))
mlb_players_by_team <- group_by(mlb_players_18, team)
summarise(mlb_players_by_team, mean_AB = mean(AB), median_AB = median(AB))
mlb_players_18 %>% group_by(team) %in% summarise(mean_AB = mean(AB), median_AB = median(AB))
mlb_players_18 %>% group_by(team) %>% summarise(mean_AB = mean(AB), median_AB = median(AB))
mlb_players_18 %>%
select(team, position, AB, doubles, triples) %>%
filter(AB > 100) %>%
mutate(doub_plus_trip = doubles + triples) %>%
group_by(team) %>%
summarise(mean_AB = mean(AB), median_AB = median(AB))
mlb_100 <- mlb_players_18 %>%  filter(AB > 100)
mlb_groups <- mlb_100 %>% filter(position3 %in% c("C", "IF", "OF"))
mlb_groups %>% group_by(position3) %>% summarise(avg_obp = mean(OBP),
sd_obp = sd(OBP),
n = length(OBP))
currentwd <- "/Users/sarahsamorodnitsky/Dropbox/HIV-COPD/ELISA/ELISA_Analysis/"
load(paste(currentwd, "ELISATreatUntreatCombined.rda", sep = ""))
library(nlme) # for lme
library(tidyr)
library(lme4) # for lmer if I choose to use
library(lmerTest)
proteins = c("CRP", "DDimer", "Fibrinogen", "IL6", "SPD", "Uteroglobin")
ELISATreatUntreatCombined_LogTransform <- ELISATreatUntreatCombined
ELISATreatUntreatCombined_LogTransform[,c("CRP1", "CRP2", "DDimer1", "DDimer2",
"Fibrinogen1", "Fibrinogen2", "IL61",
"IL62", "SPD1", "SPD2", "Uteroglobin1",
"Uteroglobin2")] <-
log(ELISATreatUntreatCombined_LogTransform[,c("CRP1", "CRP2", "DDimer1",
"DDimer2", "Fibrinogen1",
"Fibrinogen2", "IL61", "IL62",
"SPD1", "SPD2", "Uteroglobin1",
"Uteroglobin2")])
ELISATreatUntreatCombined_LogTransform$CRP_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("CRP1","CRP2")])
ELISATreatUntreatCombined_LogTransform$DDimer_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("DDimer1","DDimer2")])
ELISATreatUntreatCombined_LogTransform$Fibrinogen_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("Fibrinogen1","Fibrinogen2")])
ELISATreatUntreatCombined_LogTransform$IL6_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("IL61","IL62")])
ELISATreatUntreatCombined_LogTransform$SPD_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("SPD1","SPD2")])
ELISATreatUntreatCombined_LogTransform$Uteroglobin_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("Uteroglobin1","Uteroglobin2")])
lme_average_across_reps <- function(data) {
# Running linear mixed effects models of the following types:
#   (1) lme with random effect for case-control.
#   (2) lme with random effect for case-control and MP (non-nested)
#   (3) lme with random effect for MP
#   (4) standard linear model (no random effects)
# For testing
# data <- ELISATreatUntreatCombined_LogTransform
# To store the results
Results <- list(CRP = list(lme.re.for.cc = list(),
lme.re.for.cc.and.MP = list(),
lme.re.for.MP = list(),
lm = list()),
DDimer = list(lme.re.for.cc = list(),
lme.re.for.cc.and.MP = list(),
lme.re.for.MP = list(),
lm = list()),
Fibrinogen = list(lme.re.for.cc = list(),
lme.re.for.cc.and.MP = list(),
lme.re.for.MP = list(),
lm = list()),
IL6 = list(lme.re.for.cc = list(),
lme.re.for.cc.and.MP = list(),
lme.re.for.MP = list(),
lm = list()),
SPD = list(lme.re.for.cc = list(),
lme.re.for.cc.and.MP = list(),
lme.re.for.MP = list(),
lm = list()),
Uteroglobin = list(lme.re.for.cc = list(),
lme.re.for.cc.and.MP = list(),
lme.re.for.MP = list(),
lm = list()))
for (protein in proteins) {
# Extracting data for just one protein
pro_data <- data[,c("Working ID#", "TreatmentGroup", "setnumber", "CaseControl",
"PID", "MP", "ID", paste(protein, "_Avg", sep = ""), "Sex")]
# Ensuring the treated/untreated status, case/control status, and sex are factors
pro_data$TreatmentGroup <- factor(pro_data$TreatmentGroup)
pro_data$CaseControl <- factor(pro_data$CaseControl)
pro_data$Sex <- factor(pro_data$Sex)
# Forcing control to be the baseline for case-control status.
pro_data <- within(pro_data, CaseControl <- relevel(CaseControl, ref = "Control"))
# Changing the column name for the protein so it is consistent for each model call
colnames(pro_data)[colnames(pro_data) == paste(protein, "_Avg", sep = "")] <- "Measurement"
# Fitting lme (1)
lme.re.for.cc <- lmer(Measurement ~ TreatmentGroup*CaseControl + Sex + (1|setnumber),
data = pro_data, REML = FALSE)
# Storing the results
Results[[protein]]$lme.re.for.cc <- lme.re.for.cc
# Fitting lme (2)
lme.re.for.cc.and.MP <- lmer(Measurement ~ TreatmentGroup*CaseControl + Sex + (1|setnumber) + (1|MP),
data = pro_data, REML = FALSE)
# Storing the results
Results[[protein]]$lme.re.for.cc.and.MP <- lme.re.for.cc.and.MP
# Fitting lme (3)
lme.re.for.MP <- lmer(Measurement ~ TreatmentGroup*CaseControl + Sex + (1|MP),
data = pro_data, REML = FALSE)
# Storing the results
Results[[protein]]$lme.re.for.MP <- lme.re.for.MP
# Fitting standard linear model (4)
pro.lm <- lm(Measurement ~ TreatmentGroup*CaseControl + Sex, data = pro_data)
# Storing the results
Results[[protein]]$lm <- pro.lm
}
# Returning the reuslts
Results
}
ELISA_LogTransform_Avg_Across_Reps <- lme_average_across_reps(ELISATreatUntreatCombined_LogTransform)
summary(ELISA_LogTransform_Avg_Across_Reps$DDimer$lme.re.for.MP)
# Setting up parameters for the RMarkdown document
# (from Adam's RMarkdown template)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(fig.width = 12,
fig.height = 12,
fig.align = 'center')
options(width = 1000)
options(scipen=999)
options(digits=4)
options(knitr.table.format = "html")
# R packages necessary
library(kableExtra)
library(nlme)
library(tidyr)
library(data.table)
library(xtable)
library(sjPlot)
library(pander)
library(lmerTest)
library(jtools)
# Setting up parameters for the analysis
currentwd <- "/Users/sarahsamorodnitsky/Dropbox/HIV-COPD/ELISA/ELISA_Analysis/"
anova(ELISA_LogTransform_Avg_Across_Reps$DDimer$lme.re.for.MP, type = "I")
summary(ELISA_LogTransform_Avg_Across_Reps$DDimer$lme.re.for.MP)
table(ELISATreatUntreatCombined$TreatmentGroup)
table(ELISATreatUntreatCombined$CaseControl)
table(ELISATreatUntreatCombined$CaseControl, ELISATreatUntreatCombined$TreatmentGroup)
currentwd <- "/Users/sarahsamorodnitsky/Dropbox/HIV-COPD/ELISA/ELISA_Analysis/"
load(paste(currentwd, "ELISATreatUntreatCombined.rda", sep = ""))
library(nlme) # for lme
library(tidyr)
library(lme4) # for lmer if I choose to use
library(lmerTest)
proteins = c("CRP", "DDimer", "Fibrinogen", "IL6", "SPD", "Uteroglobin")
ELISATreatUntreatCombined_LogTransform <- ELISATreatUntreatCombined
ELISATreatUntreatCombined_LogTransform[,c("CRP1", "CRP2", "DDimer1", "DDimer2",
"Fibrinogen1", "Fibrinogen2", "IL61",
"IL62", "SPD1", "SPD2", "Uteroglobin1",
"Uteroglobin2")] <-
log(ELISATreatUntreatCombined_LogTransform[,c("CRP1", "CRP2", "DDimer1",
"DDimer2", "Fibrinogen1",
"Fibrinogen2", "IL61", "IL62",
"SPD1", "SPD2", "Uteroglobin1",
"Uteroglobin2")])
# Averaging the logged variables
ELISATreatUntreatCombined_LogTransform$CRP_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("CRP1","CRP2")])
ELISATreatUntreatCombined_LogTransform$DDimer_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("DDimer1","DDimer2")])
ELISATreatUntreatCombined_LogTransform$Fibrinogen_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("Fibrinogen1","Fibrinogen2")])
ELISATreatUntreatCombined_LogTransform$IL6_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("IL61","IL62")])
ELISATreatUntreatCombined_LogTransform$SPD_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("SPD1","SPD2")])
ELISATreatUntreatCombined_LogTransform$Uteroglobin_Avg <-
rowMeans(ELISATreatUntreatCombined_LogTransform[,c("Uteroglobin1","Uteroglobin2")])
library(tidyverse)
ddimer_data <- data[,c("Working ID#", "TreatmentGroup", "setnumber", "CaseControl",
"PID", "MP", "ID", paste(DDimer, "_Avg", sep = ""), "Sex")]
ddimer_data <- ELISATreatUntreatCombined_LogTransform[,c("Working ID#", "TreatmentGroup", "setnumber", "CaseControl",
"PID", "MP", "ID", paste(DDimer, "_Avg", sep = ""), "Sex")]
ddimer_data <- ELISATreatUntreatCombined_LogTransform[,c("Working ID#", "TreatmentGroup", "setnumber", "CaseControl",
"PID", "MP", "ID", paste("DDimer", "_Avg", sep = ""), "Sex")]
View(ddimer_data)
ddimer_data_vs <- ddimer_data %>% filter(TreatmentGroup == "VS")
ddimer_data_ut <- ddimer_data %>% filter(TreatmentGroup == "UT")
ddimer_data_vs$TreatmentGroup <- factor(ddimer_data_vs$TreatmentGroup)
ddimer_data_vs$CaseControl <- factor(ddimer_data_vs$CaseControl)
ddimer_data_vs$Sex <- factor(ddimer_data_vs$Sex)
ddimer_data_ut$TreatmentGroup <- factor(ddimer_data_ut$TreatmentGroup)
ddimer_data_ut$CaseControl <- factor(ddimer_data_ut$CaseControl)
ddimer_data_ut$Sex <- factor(ddimer_data_ut$Sex)
ddimer_data_vs <- within(ddimer_data_vs, CaseControl <- relevel(CaseControl, ref = "Control"))
ddimer_data_ut <- within(ddimer_data_ut, CaseControl <- relevel(CaseControl, ref = "Control"))
lme.re.for.MP.vs <- lmer(DDimer_Avg ~ CaseControl + Sex + (1|MP),
data = ddimer_data_vs, REML = FALSE)
lme.re.for.MP.vs <- lmer(DDimer_Avg ~ CaseControl + Sex + (1|MP),
data = ddimer_data_vs, REML = FALSE)
lme.re.for.MP.ut <- lmer(DDimer_Avg ~ CaseControl + Sex + (1|MP),
data = ddimer_data_ut, REML = FALSE)
summary(lme.re.for.MP.vs)
summary(lme.re.for.MP.ut)
?summary
# Setting up parameters for the RMarkdown document
# (from Adam's RMarkdown template)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(fig.width = 12,
fig.height = 12,
fig.align = 'center')
options(width = 1000)
options(scipen=999)
options(digits=4)
options(knitr.table.format = "html")
# R packages necessary
library(kableExtra)
library(nlme)
library(tidyr)
library(data.table)
library(xtable)
library(sjPlot)
library(pander)
library(lmerTest)
library(jtools)
# Setting up parameters for the analysis
currentwd <- "/Users/sarahsamorodnitsky/Dropbox/HIV-COPD/ELISA/ELISA_Analysis/"
kable(summary(lme.re.for.MP.vs), format = "html", align = "c",
caption = "Linear mixed effects model for D-Dimer on just the virally suppressed group. ") %>% kable_styling(full_width = F)
summary(lme.re.for.MP.vs)
tab_model(lme.re.for.MP.vs)
?tab_model
tab_model(lme.re.for.MP.vs, title = "Linear mixed effects model for D-Dimer on just the untreated group.")
table(ELISATreatUntreatCombined_LogTransform$MP)
table(ddimer_data_ut$MP)
table(ddimer_data_vs$MP)
table(ddimer_data$TreatmentGroup)
load("/Users/sarahsamorodnitsky/Downloads/ncbirths-1.rda")
View(ncbirths)
load("/Users/sarahsamorodnitsky/Downloads/ncbirths-1.rda")
9.581656e-05
6.153142e-01
2.542506e-02
1.181350e-02
library("PanCanVarSel")
currentwd <- "/Users/sarahsamorodnitsky/Documents/PanCancerOmics/"
load(paste0(currentwd, "HierarchicalSS_PanCanPanOmics"))
currentwd <- "/Users/sarahsamorodnitsky/Documents/PanCancerOmics/HierarchicalSS_PanCanPanOmics/"
load(paste0(currentwd, "XYC_V2_WithAge_StandardizedPredictors.rda"))
source(paste(PanTCGAwd, "HelperFunctions.R", sep = ""))
source(paste(currentwd, "HelperFunctions.R", sep = ""))
currentwd <- "/Users/sarahsamorodnitsky/Documents/PanCancerOmics/HierarchicalSS_PanCanPanOmics/"
source(paste0(currentwd, "HelperFunctions.R"))
paste0(currentwd, "HelperFunctions.R")
load(paste0(currentwd, "XYC_V2_WithAge_StandardizedPredictors.rda"))
setwd(currentwd)
source(paste0(currentwd, "HelperFunctions.R"))
setwd(currentwd)
source(paste0(currentwd, "HelperFunctions.R"))
PanCanVarSel::hsaft
?PanCanVarSel::hsaft
?PanCanVarSel::hsaftgroupcorr
Y
Survival
ct <- matrix(nrow = length(Survival), ncol = 2)
ct[,1] <- Survival
ct[,1]
ct <- matrix(nrow = length(Survival), ncol = 2)
ct[,1] <- Survival
ct[,1]
ct
ct <- matrix(nrow = length(Survival), ncol = 2)
head(ct)
Survival
ct <- matrix(nrow = length(unlist(Survival)), ncol = 2)
ct[,1] <- unlist(Survival)
ct[,1][is.na(ct[,1])] <- unlist(Censored)[is.na(ct[,1])]
head(ct[,1])
ct[,1]
ct[,2] <- is.na(unlist(Survival))
ct
ct[,2] <- !is.na(unlist(Survival))
?PanCanVarSel::hsaft
covariates_in_model
# Important variables
covariates_by_cancer_full = lapply(Covariates, function(cancer) as.numeric(colnames(cancer))) # the covariates each cancer type has (each should have a 1 for the intercept)
covariates_table = table(unlist(covariates_by_cancer_full)) # gives the number of cancer types who have data on each PC
covariates_in_model_full = as.numeric(names(covariates_table))
covariates_in_model = covariates_in_model_full
p = length(covariates_in_model)
covariates_by_cancer = covariates_by_cancer_full # the name of this variable in the HelperFunctions.R file
iters = 100000
n_cancer = length(Covariates)
cancer_types = names(Covariates)
covariates_in_model
covariates_by_cancer_full
cancer<-1
cancer
ct <- matrix(nrow = length(Survival[[cancer]]), ncol = 2)
ct[,1] <- Survival[[cancer]]
ct <- matrix(nrow = length(Survival[[cancer]]), ncol = 2)
ct[,1] <- Survival[[cancer]]
ct[,1][is.na(ct[,1])] <- Censored[[cancer]][is.na(ct[,1])]
ct[,2] <- !is.na(Survival[[cancer]]) # if unlist(Survival) == NA -> censored. Otherwise, uncensored. So swap.
Survival[[cancer]]
X <- Covariates[[cancer]]
head(X)
res.cancer <- hsaft(ct, X, method.tau = "truncatedCauchy", method.sigma = "Jeffreys",
burn = iters/2, nmc = iters/2, thin = 10)
res.cancer$BetaHat
length(res.cancer$BetaHat)
length(res.cancer$BetaSamples)
iters/2
res.cancer <- hsaft(ct, X, method.tau = "truncatedCauchy", method.sigma = "Jeffreys",
thin = 10)
length(res.cancer$BetaSamples)
nrow(res.cancer$BetaSamples)
ncol(res.cancer$BetaSamples)
dim(X)
head(X)
res.cancer <- hsaft(ct, X, method.tau = "truncatedCauchy", method.sigma = "Jeffreys",
burn = iters/2, nmc = iters/2, thin = 10)
res.cancer$LikelihoodSamples
?hsaft
load("/Users/sarahsamorodnitsky/Documents/SEIS631/SarahSEIS631Spring2021/Week12/HW12/fastfood.rda")
library(tidyverse)
ff <- fastfood %>% filter(restaurant %in% c("Subway", "Arbys", "Taco Bell"))
View(fastfood)
fastfood <- fastfood %>% mutate(calorie_sum = calories - cal_fat)
fastfood <- fastfood %>% mutate(calorie_sum = calories - cal_fat)
fastfood <- fastfood %>% mutate(calorie_diff = calories - cal_fat)
ff_subset <- fastfood %>% select(restaurant, item, calories) %>% filter(calories > 1000)
View(ff_subset)
ff %>% group_by(restaurant) %>% summarise(avg_cal = mean(calories),
sd_cal = sd(calories),
n = length(calories))
arbys <- ff %>% filter(restaurant == "Arbys")
arbys <- ff %>% filter(restaurant == "Arbys")
subway <- ff %>% filter(restaurant == "Subway")
tacobell <- ff %>% filter(restaurant == "Taco Bell")
hist(arbys$calories, main = "Calorie Content for Food Items \n Sold at Arby's", xlab = "Calories")
par(mfrow = c(2,2))
hist(arbys$calories, main = "Calorie Content for Food Items \n Sold at Arby's", xlab = "Calories")
hist(subway$calories, main = "Calorie Content for Food Items \n Sold at Subway", xlab = "Calories")
hist(tacobell$calories, main = "Calorie Content for Food Items \n Sold at Taco Bell", xlab = "Calories")
par(mfrow = c(1,1))
library(ggplot)
library(ggplot2)
ff %>% ggplot(aes(x = restaurant, y = calories)) %>% geom_boxplot()
ff %>% ggplot(aes(x = restaurant, y = calories)) + geom_boxplot()
ff %>% ggplot(aes(x = restaurant, y = calories, fill = restaurant)) + geom_boxplot()
ff.aov <- aov(calories ~ restaurant, data = ff)
summary(ff.aov)
pairwise.t.test
?pairwise.t.test
pairwise.t.test(ff$calories, ff$restaurant, p.adj = "Bonferroni")
pairwise.t.test(ff$calories, ff$restaurant, p.adj = "bonferroni")
load("/Users/sarahsamorodnitsky/Documents/SEIS631/SarahSEIS631Spring2021/Week12/Lecture12/mlb_players_18.rda")
head(mlb_players_18)
View(mlb_players_18)
mlg_groups %>% ggplot(aes(x = position3, y = OBP, fill = position3)) + geom_boxplot()
mlb_groups %>% ggplot(aes(x = position3, y = OBP, fill = position3)) + geom_boxplot() + title("Distribution of On-Base Percentage by Position")
mlb_groups %>% ggplot(aes(x = position3, y = OBP, fill = position3)) + geom_boxplot()
mlb_groups %>% ggplot(aes(x = position3, y = OBP, fill = position3)) + geom_boxplot()
mlb_groups %>% ggplot(aes(x = position3, y = OBP, fill = position3)) + geom_boxplot()
160+205+64
pairwise.t.test(mlb_groups$OBP, mlb_groups$position3, p.adj = "bonferroni")
pairwise.t.test(ff$calories, ff$restaurant, p.adj = "bonferroni")
t.test(arbys$calories, subway$calories)
t.test(arbys$calories, subway$calories)$p.value
t.test(arbys$calories, subway$calories)$p.value*3
t.test(arbys$calories, tacobell$calories)$p.value*3
?t.test
?pairwise.t.test
t.test(arbys$calories, tacobell$calories, var.equal = TRUE)$p.value*3
pairwise.t.test(ff$calories, ff$restaurant, p.adj = "bonferroni")
t.test(arbys$calories, tacobell$calories, var.equal = FALSE)$p.value*3
t.test(subway$calories, tacobell$calories, var.equal = FALSE)$p.value*3
t.test(subway$calories, tacobell$calories, var.equal = TRUE)$p.value*3
t.test(subway$calories, tacobell$calories, var.equal = FALSE)$p.value*3
pairwise.t.test(ff$calories, ff$restaurant, p.adj = "bonferroni", pool.sd = FALSE)
t.test(arbys$calories, tacobell$calories, var.equal = FALSE)$p.value*3
t.test(arbys$calories, subway$calories, var.equal = FALSE)$p.value*3
